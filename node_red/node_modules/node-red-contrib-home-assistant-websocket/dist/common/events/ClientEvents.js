"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ClientEvents_instances, _ClientEvents_status, _ClientEvents_errorHandler;
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const globals_1 = require("../../globals");
const Websocket_1 = require("../../homeAssistant/Websocket");
const BaseError_1 = __importDefault(require("../errors/BaseError"));
const Events_1 = __importDefault(require("./Events"));
class ClientEvents extends Events_1.default {
    constructor({ node, emitter }) {
        super({ node, emitter });
        _ClientEvents_instances.add(this);
        _ClientEvents_status.set(this, void 0);
        this.emitter.on(Websocket_1.ClientEvent.Error, this.onHaEventsError.bind(this));
    }
    addListener(event, handler, options = { once: false }) {
        super.addListener(event, __classPrivateFieldGet(this, _ClientEvents_instances, "m", _ClientEvents_errorHandler).call(this, handler), options);
    }
    onHaEventsError(err) {
        if (err === null || err === void 0 ? void 0 : err.message)
            this.node.error(err.message);
    }
    setStatus(status) {
        __classPrivateFieldSet(this, _ClientEvents_status, status, "f");
    }
}
exports.default = ClientEvents;
_ClientEvents_status = new WeakMap(), _ClientEvents_instances = new WeakSet(), _ClientEvents_errorHandler = function _ClientEvents_errorHandler(callback) {
    return (...args) => {
        var _a;
        try {
            // eslint-disable-next-line n/no-callback-literal
            callback(...args);
        }
        catch (e) {
            let statusMessage = globals_1.RED._('home-assistant.status.error');
            if (e instanceof joi_1.default.ValidationError) {
                statusMessage = globals_1.RED._('home-assistant.status.validation_error');
                this.node.error(e);
            }
            else if (e instanceof BaseError_1.default) {
                statusMessage = e.statusMessage;
                this.node.error(e);
            }
            else if (e instanceof Error) {
                this.node.error(e);
            }
            else if (typeof e === 'string') {
                this.node.error(new Error(e));
            }
            else {
                this.node.error(new Error(`Unrecognised error: ${e}`));
            }
            (_a = __classPrivateFieldGet(this, _ClientEvents_status, "f")) === null || _a === void 0 ? void 0 : _a.setFailed(statusMessage);
        }
    };
};
