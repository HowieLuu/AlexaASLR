"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Events_listeners;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeEvent = void 0;
var NodeEvent;
(function (NodeEvent) {
    NodeEvent["Close"] = "close";
    NodeEvent["Input"] = "input";
    NodeEvent["StateChanged"] = "stateChanged";
})(NodeEvent = exports.NodeEvent || (exports.NodeEvent = {}));
class Events {
    constructor({ node, emitter }) {
        _Events_listeners.set(this, []);
        this.node = node;
        this.emitter = emitter;
        emitter.setMaxListeners(0);
        node.on(NodeEvent.Close, this.onClose.bind(this));
    }
    onClose(_removed, done) {
        this.removeListeners();
        done();
    }
    addListener(event, handler, options = { once: false }) {
        __classPrivateFieldGet(this, _Events_listeners, "f").push([event, handler]);
        if (options.once === true) {
            this.emitter.once(event, handler);
        }
        else {
            this.emitter.on(event, handler);
        }
    }
    addListeners(bind, eventsList) {
        eventsList.forEach(([event, handler]) => {
            this.addListener(event, handler.bind(bind));
        });
    }
    removeListeners() {
        __classPrivateFieldGet(this, _Events_listeners, "f").forEach(([event, handler]) => {
            this.emitter.removeListener(event, handler);
        });
        __classPrivateFieldSet(this, _Events_listeners, [], "f");
    }
}
exports.default = Events;
_Events_listeners = new WeakMap();
