"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTimeoutWithErrorHandling = exports.inputErrorHandler = void 0;
const joi_1 = __importDefault(require("joi"));
const globals_1 = require("../../globals");
const BaseError_1 = __importDefault(require("./BaseError"));
function inputErrorHandler(e, deps) {
    var _a, _b, _c, _d, _e, _f;
    let statusMessage = globals_1.RED._('home-assistant.status.error');
    if (e instanceof joi_1.default.ValidationError) {
        statusMessage = globals_1.RED._('home-assistant.status.validation_error');
        (_a = deps === null || deps === void 0 ? void 0 : deps.done) === null || _a === void 0 ? void 0 : _a.call(deps, e);
    }
    else if (e instanceof BaseError_1.default) {
        statusMessage = e.statusMessage;
        (_b = deps === null || deps === void 0 ? void 0 : deps.done) === null || _b === void 0 ? void 0 : _b.call(deps, e);
    }
    else if (e instanceof Error) {
        (_c = deps === null || deps === void 0 ? void 0 : deps.done) === null || _c === void 0 ? void 0 : _c.call(deps, e);
    }
    else if (typeof e === 'string') {
        (_d = deps === null || deps === void 0 ? void 0 : deps.done) === null || _d === void 0 ? void 0 : _d.call(deps, new Error(e));
    }
    else {
        (_e = deps === null || deps === void 0 ? void 0 : deps.done) === null || _e === void 0 ? void 0 : _e.call(deps, new Error(`Unrecognised error: ${e}`));
    }
    (_f = deps === null || deps === void 0 ? void 0 : deps.status) === null || _f === void 0 ? void 0 : _f.setFailed(statusMessage);
}
exports.inputErrorHandler = inputErrorHandler;
function setTimeoutWithErrorHandling(callback, timeout, deps) {
    const timeoutId = setTimeout(() => {
        try {
            callback();
        }
        catch (e) {
            inputErrorHandler(e, deps);
        }
    }, timeout);
    return timeoutId;
}
exports.setTimeoutWithErrorHandling = setTimeoutWithErrorHandling;
