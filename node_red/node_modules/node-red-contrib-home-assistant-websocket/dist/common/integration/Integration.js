"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageType = exports.IntegrationEvent = exports.IntegrationState = void 0;
const HomeAssistantError_1 = __importStar(require("../errors/HomeAssistantError"));
var IntegrationState;
(function (IntegrationState) {
    IntegrationState["Loaded"] = "loaded";
    IntegrationState["NotLoaded"] = "notloaded";
    IntegrationState["Unloaded"] = "unloaded";
})(IntegrationState = exports.IntegrationState || (exports.IntegrationState = {}));
var IntegrationEvent;
(function (IntegrationEvent) {
    IntegrationEvent["Trigger"] = "trigger";
})(IntegrationEvent = exports.IntegrationEvent || (exports.IntegrationEvent = {}));
var MessageType;
(function (MessageType) {
    MessageType["Discovery"] = "nodered/discovery";
    MessageType["Entity"] = "nodered/entity";
    MessageType["RemoveDevice"] = "nodered/device/remove";
    MessageType["UpdateConfig"] = "nodered/entity/update_config";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
class Integration {
    constructor({ homeAssistant, state }) {
        this.status = [];
        this.notInstallMessage = 'Node-RED custom integration needs to be installed in Home Assistant for this node to function correctly.';
        this.homeAssistant = homeAssistant;
        this.state = state;
    }
    get isConnected() {
        return this.homeAssistant.isConnected;
    }
    get isIntegrationLoaded() {
        return this.homeAssistant.isIntegrationLoaded;
    }
    setStatus(status) {
        this.status.push(status);
    }
    async sendUpdateConfig(serverId, nodeId, config) {
        const payload = {
            type: MessageType.UpdateConfig,
            server_id: serverId,
            node_id: nodeId,
            config,
        };
        try {
            await this.homeAssistant.websocket.send(payload);
        }
        catch (err) {
            if ((0, HomeAssistantError_1.isHomeAssistantApiError)(err)) {
                throw new HomeAssistantError_1.default(err, 'home-assistant.error.error');
            }
            throw err;
        }
    }
}
exports.default = Integration;
